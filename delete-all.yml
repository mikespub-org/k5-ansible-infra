#!/usr/bin/env ansible-playbook
# vim: noai:ts=2:sw=2:et
---


#
# to delete everything you have to do it in reverse order (obvs) :)
#

- name: "Delete our demo on K5"

  hosts: localhost
  connection: local
  gather_facts: no

  # batch - run 10 tasks at a time when looped
  serial: 10

  # normally these vars would be in a separate vars file
  vars:

    jumpbuilt: false
        

  tasks:
    # we pull in our vars
    - include_vars: 
        dir: "vars"
        depth: 1

    - name: "Get OpenStack Server Facts"
      os_server_facts:
        server: "nx-*"

#    - debug: var=openstack_servers

    - name: "test for jump server"
      set_fact:
        jumpbuilt: true
      when: "item.name == jumpserver.name"
      with_items: "{{ openstack_servers }}"

    - debug: var=jumpbuilt

    - block:
      - name: "Remove floating IP from jump server"
        os_floating_ip:
          # https://docs.ansible.com/ansible/os_floating_ip_module.html
          server: "{{ jumpserver.name }}"
          purge: yes  # no = keep for later
          state: absent # but remove from this server

      - name: "Delete the jumpserver compute instances"
        # http://docs.ansible.com/ansible/os_server_module.html
        os_server:
          name: "{{ jumpserver.name }}"
          state: absent

      when: jumpbuilt == true


    - name: "Delete the service compute instances"
      # http://docs.ansible.com/ansible/os_server_module.html
      os_server:
        name: "{{ item.name }}"
        state: absent

      # loop through our list of servers (eg. foreach)
      with_items: "{{ servers }}"
      register: k5_instances
      async: "{{ async_max_loops }}"
      poll: "{{ async_poll }}"


    - name: "Wait for instance deletion to complete"
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: k5_jobs
      until: k5_jobs.finished
      retries: "{{ retries_max_loops }}"
      delay: "{{ retries_delay }}"
      with_items: "{{ k5_instances.results }}"


#    - name: "Delete Router"
#      # https://docs.ansible.com/ansible/os_router_module.html
#      os_router:
#        state: absent 
#        name: "{{ router.name }}"

    - name: "Check if this router is already created via the openstack CLI"
      shell: openstack router list | egrep " {{ router.name }} " # space delimited the name incase of mismatch
      register: routers_result
      ignore_errors: true   # skip any errors here

    - name: "Delete the router via openstack CLI"
      command: openstack router delete "{{ router.name }}"
      ignore_errors: true   # skip any errors here
      when: routers_result|success


    # delete Networks and Subnets
    # we use an include to loop over a number of tasks at once
    - name: "Delete Subnets and Networks"
      include: delete-net-include.yml
      with_items: "{{ networks }}"
      loop_control:
        loop_var: outer_item
      # TODO report no_log not working in this loop
      no_log: True

    - name: "Delete security groups"
      os_security_group:
      # https://docs.ansible.com/ansible/os_security_group_module.html
        state: absent
        name: "{{ item.0.name }}"
      with_subelements: 
        - "{{ security_groups }}"
        - rules
      no_log: True

